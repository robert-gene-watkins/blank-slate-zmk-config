/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   1

#define CAP_L 1
#define FUN_L 2
#define RSE_L 3
#define LWR_L 4
#define ADJ_L 5
#define MSE_L 6

#define D_GRV
#define D_S_Q &dbl Q Q 
#define D_D_Q &dbl LS(Q) LS(Q)
#define D_PAREN &dbl LPAR RPAR
#define D_BRC &dbl UNDER PLUS
#define D_BKT &dbl MINUS EQUAL
#define D_ANG &dbl LS(W) LS(E) 

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };
&mt { tapping_term_ms = <175>; flavor = "tap-preferred"; };
&caps_word {
	continue-list = <SEMI COMMA DOT FSLH LALT>;
};

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,physical-layout =
                       &layout_ortho_4x12_all1u;
    };

    behaviors {
		rw_caps: rw_caps {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <SEMI COMMA DOT FSLH SQT DQT>;
			ignore-alphas;
		};
        // Mod-tap with tap-preferred behavior and quick-tap settings that enable repeat
        mt_rep: mt_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <1 2 3 6 7 8 31 0 9>;
            bindings = <&kp>, <&kp>;
        };

        // Layer-tap with tap-preferred behavior and quick-tap settings that enable repeat
        lt_rep: lt_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };
    };

	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <RSE_L LWR_L>;
			then-layer = <ADJ_L>;
		};
	};

	combos {
		compatible = "zmk,combos";
		caps_word_combo {
			bindings = <&rw_caps CAP_L>;
			key-positions = <15 20>;
		};
	};

    macros {
		dbl: double_chr {
			compatible = "zmk,behavior-macro-two-param";
			#binding-cells = <2>;
			bindings =
				<&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
				<&macro_param_2to1 &kp MACRO_PLACEHOLDER>,
				<&macro_tap &kp LEFT>;
		};
		mscrl: mscrl {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings =
				<&macro_press &kp CAPS>,
				<&macro_release &kp CAPS>,
				<&macro_press &kp KP_NLCK>,
				<&macro_release &kp KP_NLCK>,
				<&macro_press &kp CAPS>,
				<&macro_release &kp CAPS>,
				<&macro_press &kp KP_NLCK>,
				<&macro_release &kp KP_NLCK>;
		};
		mrnga: mouse_range_a {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press &kp LSHFT>,<&macro_wait_time 30>,<&macro_wait_time 30>,<&macro_release &kp LSHFT>;
		};
		mrng: mouse_range {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings =
				<&macro_wait_time 20>,
				<&macro_press &kp LSHFT>,
				<&macro_tap &mkp MB1>,
				<&macro_release &kp LSHFT>;
		};
		mitm: mouse_item {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings =
				<&macro_wait_time 30>,
				<&macro_press &kp LCTRL>,
				<&macro_press &mkp MB1>,
				<&macro_release &mkp MB1>,
				<&macro_release &kp LCTRL>;
		};
    };

    /*
    tap_dances {
    	shifty: shift_caps_word {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SHIFTY";
		#binding-cells = <0>;
		tapping-term-ms = <150>;
		bindings = <&kp LSHFT>, <&caps_word>;
	};
    };
*/
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "QWERTY Base";
            bindings = <
 &kp TAB    &kp Q           &kp W          &kp E           &kp R           &kp T     &kp Y     &kp U           &kp I           &kp O           &kp P             &kp BKSP
 &mo RSE_L  &lt_rep MSE_L A &mt_rep LALT S &mt_rep LSHFT D &mt_rep LCTRL F &kp G     &kp H     &mt_rep RCTRL J &mt_rep RSHFT K &mt_rep RALT L  &mt_rep LWIN SEMI &lt_rep RSE_L SQT
 &mo LWR_L  &kp Z           &kp X          &kp C           &kp V           &kp B     &kp N     &kp M           &kp COMMA       &kp DOT         &kp FSLH          &lt_rep LWR_L RET
 &mo FUN_L  &kp ESC         &trans         &kp GRAVE       &kp LBKT        &kp SPACE &kp SPACE &kp BSLH        &kp LEFT        &kp DOWN        &kp UP            &kp RIGHT
            >;
        };

		cap_layer {
			label = "Caps";
			bindings = <
	&trans &kp LS(Q) &kp LS(W) &kp LS(E) &kp LS(R) &kp LS(T) &kp LS(Y) &kp LS(U) &kp LS(I)     &kp LS(O)   &kp LS(P)      &trans
	&trans &kp LS(A) &kp LS(S) &kp LS(D) &kp LS(F) &kp LS(G) &kp LS(H) &kp LS(J) &kp LS(K)     &kp LS(L)   &kp LS(SEMI)   &trans
	&trans &kp LS(Z) &kp LS(X) &kp LS(C) &kp LS(V) &kp LS(B) &kp LS(N) &kp LS(M) &kp LS(COMMA) &kp LS(DOT) &kp LS(FSLH)   &trans
	&trans &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans        &trans      &trans         &trans
			>;
		};

		func_layer {
			label = "Func";
			bindings = <
	&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10 &trans
	&trans  &kp F11 &kp F12 &kp F13 &kp F14 &kp F15 &kp F16 &kp F17 &kp F18 &kp F19 &kp F20 &trans
	&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
	&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
			>;
		};

		raise_layer {
			label = "Raise";
			bindings = <
	&trans    &kp EXCL &kp AT    &kp HASH &kp DLLR  &kp PRCNT &kp CARET &kp AMPS &kp ASTRK &kp LPAR &kp RPAR &kp DEL
	&trans    D_GRV    D_ANG     &kp LBRC &kp UNDER &kp MINUS &kp EQUAL &kp PLUS &trans    &trans   &trans   &trans
	&trans    D_S_Q    D_D_Q     D_PAREN  D_BRC     D_BKT     &trans    &trans   &trans    &trans   &trans   &trans
	&trans    &trans   &trans    &trans   &trans    &trans    &trans    &trans   &trans    &trans   &trans   &trans
			>;

		};

		lower_layer {
			label = "Lower";
			bindings = <
	&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9     &kp N0          &trans
	&trans &trans &trans &trans &trans &trans &trans &kp N4 &kp N5 &kp N6     &kp KP_PLUS     &trans
	&trans &trans &trans &trans &trans &trans &trans &kp N1 &kp N2 &kp N3     &kp RBKT        &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &kp N0 &kp KP_DOT &kp KP_MULTIPLY &kp KP_DIVIDE
			>;

		};

		adjust_layer {
			label = "Adjust";
			bindings = <
	&bootloader &bt BT_SEL 0   &bt BT_SEL 1 &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans      &bt BT_CLR     &trans       &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans      &bt BT_CLR_ALL &trans       &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&soft_off   &trans         &trans       &trans &trans &trans &trans &trans &trans &trans &trans &trans
			>;

		};

		mouse_layer {
			label = "Mouse";
			bindings = <
	&trans &trans &mrng    &mitm    &trans   &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &mkp MB1 &mkp MB2 &mkp MB3 &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &trans   &mscrl   &trans   &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &trans   &trans   &trans   &trans &trans &trans &trans &trans &trans &trans
			>;

		};
/*

	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LEFT       &kp DOWN    &kp UP     &kp RIGHT  &trans
&trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
#ifdef TBLE_DUAL_2U
&trans  &trans        &trans     &trans              &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans        &trans     &trans      &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans  &trans        &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp LBKT   &trans &trans &trans    &kp RBKT    &kp C_PREV    &kp N7     &kp N8      &kp N9       &trans     &trans
&trans     &kp MINUS  &trans &trans &trans    &kp EQUAL   &kp C_NEXT    &kp N4     &kp N5      &kp N6       &trans     &trans
&trans     &kp GRAVE  &trans &trans &trans    &kp BSLH    &trans        &kp N1     &kp N2      &kp N3       &trans     &trans
#ifdef TBLE_DUAL_2U
&trans  &trans       &trans     &kp N0              &trans                 &trans            &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans  &trans       &trans     &kp N0      &trans           &none            &trans        &kp DEL      &trans &trans &trans
#else
&trans  &trans       &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans &trans &trans
#endif
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans     &kp LBRC   &kp AMPS   &kp STAR    &kp LPAR     &kp RBRC     &trans     &trans    &trans       &trans       &trans     &bootloader
&trans     &kp COLON  &kp DLLR   &kp PRCNT   &kp CARET    &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
&trans     &kp TILDE  &kp EXCL   &kp AT      &kp HASH     &kp PIPE     &trans     &trans    &trans       &trans       &trans     &trans
#ifdef TBLE_DUAL_2U
&trans &trans        &trans     &kp RPAR                &trans                    &trans       &trans         &trans &trans &trans
#elif defined(TBLE_MIT)
&trans &trans        &trans     &kp RPAR        &trans                &trans             &trans      &trans   &trans &trans &trans
#else
&trans &trans        &trans     &kp RPAR        &trans          &trans       &trans    &trans  &trans         &trans &trans &trans
#endif
            >;
        };
*/


    };
};

